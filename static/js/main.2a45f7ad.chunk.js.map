{"version":3,"sources":["actions/index.js","actions/creator.js","components/ModelParams/ModelParamsItem.js","components/ModelParams/index.js","getImg.js","components/Model/index.js","lines.js","components/Info/index.js","getChartData.js","components/App/index.js","store/index.js","index.js"],"names":["value","type","actions","ModelParamsItem","name","units","min","max","setInput","range","disabled","style","index","selected","inputName","className","onClick","toFixed","ModelParams","callbacks","dispatch","useDispatch","L","useSelector","state","A","S","D","useState","setRange","range_","useEffect","action","step","values","onChange","renderTrack","props","children","height","borderRadius","width","backgroundColor","marginTop","marginLeft","marginRight","renderThumb","outline","boxShadow","drawMonoInterfPicture","waveL","gradientArr","patternStyle","wavelength","b","labels","intensities","angle","maxAngle","Math","atan","i","push","sin","PI","forEach","x","alpha","length","join","Model","waves","lambda","maximum","k","l","r","m","tan","asin","lines","maxK","floor","w","cos","y","raysMaxima","n","item","x1","y1","x2","y2","stroke","strokeWidth","OverlayTrigger","placement","overlay","Tooltip","d","lightWidth","fill","opacity","document","querySelectorAll","click","id","markerWidth","markerHeight","refX","refY","orient","points","markerUnits","backgroundImage","getImg","replace","Info","data","getChartData","datasets","label","borderColor","options","responsive","scales","title","display","text","font","size","weight","ticks","App","store","createStore","parseInt","parseFloat","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2a45f7ad.chunk.js","sourcesContent":["export default {\r\n    SET_L: \"SET_L\",\r\n    SET_D: \"SET_D\",\r\n    SET_S: \"SET_S\",\r\n    SET_A: \"SET_A\"\r\n};","import actions from './index';\r\n\r\nexport default {\r\n    setL: value => {\r\n        return {\r\n            type: actions.SET_L,\r\n            value: value\r\n        }\r\n    },\r\n    setD: value => {\r\n        return {\r\n            type: actions.SET_D,\r\n            value: value\r\n        }\r\n    },\r\n    setS: value => {\r\n        return {\r\n            type: actions.SET_S,\r\n            value: value\r\n        }\r\n    },\r\n    setA: value => {\r\n        return {\r\n            type: actions.SET_A,\r\n            value: value\r\n        }\r\n    }\r\n}","export default function ModelParamsItem({name, units, min, max, value, setInput, range, disabled, style, index = \"\"}){\r\n    let onClick = () => {\r\n        let selected = name == range.inputName;\r\n        if(!selected){\r\n            setInput(min, max, value, units, name);\r\n        }else{\r\n            setInput(min, max, value, units, '');\r\n        }\r\n    };\r\n\r\n    let selected = name == range.inputName;\r\n\r\n    return(\r\n        <div className={\"model-params-item \" + (selected ? \"selected\" : \"\") + (disabled ? \"disabled\" : \"\")} onClick={onClick} style={{...style}}>\r\n            <div className=\"model-params-item__value\">{value.toFixed(1)}</div>\r\n            <div className=\"model-params-item__units\">{units}</div>\r\n            <div className=\"model-params-item__name\">{name}<span>{index}</span></div>\r\n        </div>\r\n    );\r\n}","import { useCallback, useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport action from '../../actions/creator'; \r\n\r\nimport ModelParamsItem from './ModelParamsItem';\r\n\r\nimport { Range } from 'react-range';\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\n\r\nexport default function ModelParams(callbacks){\r\n    const dispatch = useDispatch();\r\n\r\n    const A = useSelector(state => state.A);\r\n    const L = useSelector(state => state.L);\r\n    const S = useSelector(state => state.S);\r\n    const D = useSelector(state => state.D);\r\n\r\n    const [range, setRange] = useState({\r\n        min: 0,\r\n        max: 1,\r\n        units: '??',\r\n        value: 0,\r\n        inputName: ''\r\n    });\r\n\r\n    \r\n    let setInput = (min, max, value, units, inputName) => {\r\n        let range_ = {...range};\r\n        range_.min = min;\r\n        range_.max = max;\r\n        range_.value = value;\r\n        range_.units = units;\r\n        range_.inputName = inputName;\r\n\r\n        setRange(range_);\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if(range.inputName == 'λ'){\r\n            dispatch(action.setL(range.value));\r\n        }else if(range.inputName == 'S'){\r\n            dispatch(action.setS(range.value));\r\n        }else if(range.inputName == 'D'){\r\n            dispatch(action.setD(range.value));\r\n        }else if(range.inputName == 'θ'){\r\n            dispatch(action.setA(range.value));\r\n        }\r\n    }, [range]);\r\n\r\n    return(\r\n        <div className=\"model-params\">\r\n            <div className=\"model-params-item-wrapper\">\r\n                <ModelParamsItem name=\"S\" units=\"м\" min={0.5} max={7.5} value={S} setInput={setInput} range={range} />\r\n                <ModelParamsItem name=\"D\" units=\"пм\" min={246} max={688} value={D} setInput={setInput} range={range} />\r\n                {/* <ModelParamsItem name=\"θ\" units=\"град\" min={0} max={180} value={A} setInput={setInput} range={range} /> */}\r\n                <ModelParamsItem name=\"λ\" index=\"дб\" units=\"нм\" min={380} max={750} value={L} setInput={setInput} range={range} disabled />\r\n                {/* <ModelParamsItem name=\"h\" units=\"м\" min={500} max={5000} value={3.8} setInput={setInput} range={range} disabled /> */}\r\n            </div>\r\n            <div className={\"model-params-input \" + (range.inputName == '' ? 'disabled' : '')}>\r\n                <div className=\"model-params-input-inner-wrapper\">\r\n                    <div className=\"model-params-input-value\">{range.min}</div>\r\n                    <Range\r\n                        step={0.1}\r\n                        min={range.min}\r\n                        max={range.max}\r\n                        values={[range.value]}\r\n                        onChange={(values) => {\r\n                            let range_ = {...range};\r\n                            range_.value = values[0];\r\n                            setRange(range_);\r\n                        }}\r\n                        disabled={range.inputName == ''}\r\n\r\n                        renderTrack={({ props, children }) => (\r\n                            <div\r\n                                {...props}\r\n                                style={{\r\n                                    ...props.style,\r\n                                    height: '6px',\r\n                                    borderRadius: '2px',\r\n                                    width: '330px',\r\n                                    backgroundColor: '#ccc',\r\n                                    marginTop: '11px',\r\n                                    marginLeft: '15px',\r\n                                    marginRight: '15px'\r\n                                }}\r\n                            >\r\n                                {children}\r\n                            </div>\r\n                        )}\r\n\r\n                        renderThumb={({ props }) => (\r\n                            <div\r\n                                {...props}\r\n                                style={{\r\n                                    ...props.style,\r\n                                    height: '15px',\r\n                                    width: '15px',\r\n                                    borderRadius: '100px',\r\n                                    backgroundColor: '#fff',\r\n                                    outline: 'none',\r\n                                    boxShadow: 'rgba(0, 0, 0, 0.3) 0 1px 3px'\r\n                                }}\r\n                            />\r\n                        )}\r\n                    />\r\n\r\n                    <div className=\"model-params-input-value\">{range.max}</div>\r\n                </div>\r\n                <div className=\"model-params-input-units\">{range.units}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import waveColor from './waveColor';\r\n\r\n// export default function patternDiffraction(lambda, b, L, width){\r\n//     function toHex(z){\r\n//         if (z < 0) z = 0;   \r\n//         if (z > 1) z = 1;  \r\n//         var n = Math.floor(256*z);\r\n//         var hex = n.toString(16); \r\n//         if (hex.length < 2) hex = \"0\"+hex;\r\n//         if (hex.length > 2) hex = \"ff\"; \r\n//         return hex;\r\n//     }\r\n\r\n//     function rgb (lambda, relInt) {\r\n//         lambda *= 1e9;          \r\n//         if (relInt == undefined) relInt = 1;    \r\n//         var r1 = 0, g1 = 0, b1 = 0;                        \r\n//         if (lambda >= 380 && lambda < 440){\r\n//           r1 = (440-lambda)/60; g1 = 0; b1 = 1;\r\n//         }\r\n//         else if (lambda < 490){\r\n//           r1 = 0; g1 = (lambda-440)/50; b1 = 1;\r\n//         }\r\n//         else if (lambda < 510){\r\n//           r1 = 0; g1 = 1; b1 = (510-lambda)/20;\r\n//         }\r\n//         else if (lambda < 580){\r\n//           r1 = (lambda-510)/70; g1 = 1; b1 = 0;\r\n//         }\r\n//         else if (lambda < 645){\r\n//           r1 = 1; g1 = (645-lambda)/65; b1 = 0;\r\n//         }\r\n//         else if(lambda <= 780){\r\n//           r1 = 1; g1 = 0; b1 = 0;\r\n//         }\r\n\r\n//         var f = 0;                                               \r\n//         if (lambda >= 380 && lambda < 420) \r\n//           f = 0.3+0.7*(lambda-380)/40;\r\n//         else if (lambda < 700)\r\n//           f = 1;\r\n//         else if (lambda <= 780)\r\n//           f = 0.3+0.7*(780-lambda)/80;\r\n//         var gamma = 0.8;                                         \r\n//         var r2 = relInt*Math.pow(f*r1,gamma);                   \r\n//         var g2 = relInt*Math.pow(f*g1,gamma);                    \r\n//         var b2 = relInt*Math.pow(f*b1,gamma);                   \r\n//         return \"#\"+toHex(r2)+toHex(g2)+toHex(b2);                \r\n//     }\r\n\r\n//     function rgb2(lambda, relInt){\r\n//         var i = Math.pow(relInt,1/3);                            \r\n//         return rgb(lambda,i);                                   \r\n//     }\r\n\r\n//     function amplitude(x){\r\n//         if (x == 0) return 1;                                    \r\n//         var c = Math.PI*b*Math.sin(x)/lambda*L;                    \r\n//         return Math.sin(c)/c;                                    \r\n//     }\r\n\r\n        \r\n//     function intensity(x){\r\n//         var a = amplitude(x);                                    \r\n//         return a*a;                                             \r\n//     }\r\n\r\n\r\n//     let gradientArr = [];\r\n//     var uM = width/2;                  \r\n//     var  w = 150;                                         \r\n//     var  pix = w/Math.PI;                               \r\n\r\n//     var max = (uM+w/2) - (uM-w/2);\r\n\r\n\r\n//     console.log(uM-w/2, uM+w/2);\r\n\r\n//     for (var u=uM-w/2; u<=uM+w/2; u++){\r\n//         var x = (uM-u)/pix;                                    \r\n//         var c = rgb2(lambda, intensity(x));                   \r\n//         gradientArr.push(`${c} ${((u-(uM-w/2))/max)*100}%`);\r\n//     }\r\n\r\n//     let patternStyle = 'linear-gradient(90deg, '+gradientArr.join(',') + ')';\r\n\r\n//     return patternStyle;\r\n    \r\n// }\r\n\r\n// export default function drawMonoInterfPicture(waveL, D, S) {\r\n//     // wavelength *= 1e9;\r\n//     // b *= 1e5;\r\n//     // L *= 170;\r\n\r\n//     // function intensityFunction(x) {\r\n//     //     let e = 1e-6;\r\n//     //     let u = (Math.PI * b * x) / (wavelength * e * L);\r\n//     //     let q = (Math.PI * d * x) / (wavelength * e * L);\r\n//     //     return Math.pow(b, 2) * Math.pow(Math.sin(u) / u, 2) * Math.pow(Math.sin(q) / Math.sin(q), 2)\r\n//     // }\r\n\r\n//     // let labels = [];\r\n\r\n\r\n//     // for (let x = -3/2; x <= 3/2; x+=3/497) {\r\n//     //     labels.push(x);\r\n//     // }\r\n\r\n//     // let //ctx = canvas.getContext(\"2d\"),\r\n//     //     height = 400,\r\n//     //     intensities = [];\r\n\r\n//     // labels.forEach(function(x) {\r\n//     //     intensities.push(intensityFunction(x))\r\n//     // });\r\n\r\n//     // let yStep = width / labels.length;\r\n\r\n//     // let Max = intensities[labels.length / 2 ];\r\n\r\n\r\n//     let gradientArr = [];\r\n//     let patternStyle = null;\r\n\r\n//     let wavelength = waveL*1e-9;\r\n//     let b = D * 1e-12;\r\n\r\n//     let labels = [];\r\n//     let intensities = [];\r\n\r\n//     function max(n){\r\n//         return Math.asin((2*n+1)*wavelength/2/b)\r\n//     }\r\n\r\n//     function intense(angle){\r\n//         return Math.sin(Math.PI*b*Math.sin(angle)/wavelength)**2/(Math.PI*b*Math.sin(angle)/wavelength)**2;\r\n//     }\r\n    \r\n//     let w = 1.9;\r\n//     let maxAngle = Math.atan(w/S);\r\n\r\n//     for(var i = -maxAngle; i < maxAngle; i += 0.01){\r\n//         labels.push(i.toFixed(2));\r\n//         intensities.push(intense(i));\r\n//     }\r\n    \r\n\r\n//     labels.forEach(function(x, index) {\r\n//         const alpha = intensities[index] / 1;\r\n//         //gradientArr.push(`${rgbColor.replace(')', `, ${alpha})`).replace('rgb', 'rgba')} ${((x-labels[0])/(labels[labels.length - 1] - labels[0]))*100}%`);\r\n//         gradientArr.push(`rgba(52, 152, 219, ${alpha}) ${((x-labels[0])/(labels[labels.length - 1] - labels[0]))*100}%`);\r\n//         patternStyle = 'linear-gradient(90deg, '+gradientArr.join(',') + ')';\r\n//     });\r\n\r\n//     return patternStyle;\r\n// }\r\n\r\nexport default function drawMonoInterfPicture(waveL, D, S) {\r\n    // wavelength *= 1e9;\r\n    // b *= 1e5;\r\n    // L *= 170;\r\n\r\n    // function intensityFunction(x) {\r\n    //     let e = 1e-6;\r\n    //     let u = (Math.PI * b * x) / (wavelength * e * L);\r\n    //     let q = (Math.PI * d * x) / (wavelength * e * L);\r\n    //     return Math.pow(b, 2) * Math.pow(Math.sin(u) / u, 2) * Math.pow(Math.sin(q) / Math.sin(q), 2)\r\n    // }\r\n\r\n    // let labels = [];\r\n\r\n\r\n    // for (let x = -3/2; x <= 3/2; x+=3/497) {\r\n    //     labels.push(x);\r\n    // }\r\n\r\n    // let //ctx = canvas.getContext(\"2d\"),\r\n    //     height = 400,\r\n    //     intensities = [];\r\n\r\n    // labels.forEach(function(x) {\r\n    //     intensities.push(intensityFunction(x))\r\n    // });\r\n\r\n    // let yStep = width / labels.length;\r\n\r\n    // let Max = intensities[labels.length / 2 ];\r\n\r\n\r\n    let gradientArr = [];\r\n    let patternStyle = null;\r\n\r\n    let wavelength = waveL*1e-9;\r\n    let b = D * 1e-12;\r\n\r\n    let labels = [];\r\n    let intensities = [];\r\n\r\n    function max(n){\r\n        return Math.asin(n*wavelength/2/D)*1000\r\n        return Math.asin((1.2*2*n)*wavelength/2/D)\r\n    }\r\n\r\n    function intense(angle){\r\n        return Math.sin(Math.PI*b*Math.sin(angle)/wavelength)**2/(Math.PI*b*Math.sin(angle)/wavelength)**2;\r\n    }\r\n    \r\n    let w = 1.9;\r\n    let maxAngle = Math.atan(w/S);\r\n\r\n    for(var i = -maxAngle; i < maxAngle; i += 0.01){\r\n        labels.push(i.toFixed(2));\r\n        intensities.push(intense(i));\r\n    }\r\n    \r\n\r\n    labels.forEach(function(x, index) {\r\n        const alpha = intensities[index] / 1;\r\n        //gradientArr.push(`${rgbColor.replace(')', `, ${alpha})`).replace('rgb', 'rgba')} ${((x-labels[0])/(labels[labels.length - 1] - labels[0]))*100}%`);\r\n        gradientArr.push(`rgba(52, 152, 219, ${alpha}) ${((x-labels[0])/(labels[labels.length - 1] - labels[0]))*100}%`);\r\n        patternStyle = 'linear-gradient(90deg, '+gradientArr.join(',') + ')';\r\n    });\r\n\r\n    return patternStyle;\r\n}","import { useCallback, useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport waveColor from '../../waveColor';\r\nimport lines from '../../lines';\r\nimport ModelParams from '../ModelParams';\r\n\r\nimport getImg from '../../getImg';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.scss';\r\n\r\nimport { Form, Col, Row, OverlayTrigger, Tooltip, Button, Container } from 'react-bootstrap';\r\n\r\nconst PIXEL_PER_METR = 740/7;\r\n\r\nfunction Model(){\r\n    const wavelength = useSelector(state => state.L);\r\n    const S = useSelector(state => state.S);\r\n    const D = useSelector(state => state.D);\r\n\r\n    let waves = [];\r\n\r\n    let linePos = lines(wavelength*1e-9, D*1e-9);\r\n    \r\n    let lightWidth = 100;\r\n    let lightbetweenRange = 30;\r\n\r\n    function max(n){\r\n        return Math.asin(n*wavelength/2/D)*4000\r\n        return Math.asin((1.2*2*n)*wavelength/2/D)\r\n    }\r\n\r\n    let angle = [];\r\n\r\n    for(let i = 0; i < 3; i++){\r\n        angle.push(max(i));\r\n    }\r\n\r\n    angle.forEach(item => {\r\n        waves.push(<line x1=\"0\" y1=\"200\" x2={S*1000} y2={1200*S*Math.sin(item)+200} stroke={\"#bdc3c7\"} strokeWidth={`2px`} />);\r\n        waves.push(<line x1=\"0\" y1=\"200\" x2={S*1000} y2={-1200*S*Math.sin(item)+200} stroke={\"#bdc3c7\"} strokeWidth={`2px`} />);\r\n    });\r\n\r\n    //waves.push(<line x1=\"0\" y1=\"200\" x2={1000} y2={200} stroke={\"#bdc3c7\"} strokeWidth={`2px`} />);\r\n\r\n    return(\r\n        <div className=\"model\">\r\n            <h2><span className=\"grad\">Дифракция</span> электронов<br/> на кристалле</h2>\r\n            <div className=\"model-inner-wrapper\">\r\n                <div className=\"model-scheme\">\r\n                    <div className=\"model-scheme__light\">\r\n                        <OverlayTrigger\r\n                            placement={\"left\"}\r\n                            overlay={\r\n                                <Tooltip>\r\n                                    Поток электронов\r\n                                </Tooltip>\r\n                            }\r\n                        >\r\n                            <svg>\r\n                                <path\r\n                                    d={`M 0 200 h ${lightWidth-2} l -5 -5 m 5 5 l -5 5`}\r\n                                    fill=\"none\"\r\n                                    opacity=\"1\" \r\n                                    stroke={\"#e74c3c\"}\r\n                                    strokeWidth=\"3px\"\r\n                                >\r\n                                </path>\r\n                            </svg>\r\n                        </OverlayTrigger>   \r\n                    </div>\r\n                    <div\r\n                        className=\"model-scheme__slit\"\r\n                        onClick={() => {\r\n                            document.querySelectorAll('.model-params-item ')[1].click();\r\n                        }}\r\n                    >\r\n                        <div className=\"model-scheme__slit__wall\">\r\n                            <span>Кристалл</span>\r\n                            <OverlayTrigger\r\n                                placement={\"right\"}\r\n                                overlay={\r\n                                    <Tooltip>\r\n                                        Кристалл\r\n                                    </Tooltip>\r\n                                }\r\n                            >\r\n                                <div\r\n                                    className=\"model-scheme__slit__wall__slit\"\r\n                                    style={{\r\n                                        width: 5+7/500*D\r\n                                    }}\r\n                                ></div>\r\n                            </OverlayTrigger>             \r\n                            <span>Кристалл</span>\r\n                        </div>\r\n                    </div>\r\n                    <div\r\n                        style={{\r\n                            width: PIXEL_PER_METR*S\r\n                        }}\r\n                        className=\"model-scheme__waves\"\r\n                    >\r\n                        <svg>\r\n                            <defs>\r\n                                <marker id=\"startarrow\" markerWidth=\"10\" markerHeight=\"7\" \r\n                                refX=\"5\" refY=\"1.5\" orient=\"auto\">\r\n                                    <polygon points=\"5 0, 5 3, 0 1.5\" fill=\"#000000\" />\r\n                                </marker>\r\n                                <marker id=\"endarrow\" markerWidth=\"10\" markerHeight=\"7\" \r\n                                refX=\"0\" refY=\"1.5\" orient=\"auto\" markerUnits=\"strokeWidth\">\r\n                                    <polygon points=\"0 0, 5 1.5, 0 3\" fill=\"#000000\" />\r\n                                </marker>\r\n                            </defs>\r\n\r\n                            {/* <text x=\"50%\" y=\"400\" style={{fontSize: 22, fontWeight: 'bold'}} textAnchor=\"middle\">S</text> */}\r\n\r\n                            {/* <text x={68} y=\"10%\" style={{fontSize: 22, fontWeight: 'bold'}} textAnchor=\"middle\">h</text>\r\n\r\n                            <line x1={55} x2={55} y1=\"387\" y2=\"15\" strokeWidth=\"3px\" stroke=\"#000000\" marker-end=\"url(#endarrow)\" markerStart=\"url(#startarrow)\" /> */}\r\n                            {/* <line x1=\"15\" x2={S*PIXEL_PER_METR - 15} y1=\"380\" y2=\"380\" strokeWidth=\"3px\" stroke=\"#000000\" marker-end=\"url(#endarrow)\" markerStart=\"url(#startarrow)\" />    */}\r\n                            {waves}\r\n                        </svg>\r\n                    </div>\r\n                    <div\r\n                        className=\"model-scheme__screen\"\r\n                        onClick={() => {\r\n                            document.querySelectorAll('.model-params-item ')[0].click();\r\n                        }}\r\n                    >\r\n                        <div\r\n                            className=\"model-scheme__screen__wall\"\r\n                            style={{\r\n                                backgroundImage: getImg(wavelength, D, S).replace('90deg', '180deg')\r\n                            }}\r\n                        ></div>\r\n                        <div className=\"model-scheme__screen__name\">\r\n                            экран\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <ModelParams />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Model;","export default function lines(lambda, b, S){\r\n    var RAD = 1000;  \r\n\r\n    function maximum(k) {\r\n        if (k == 0) return 0;\r\n\r\n        var l = k*Math.PI;\r\n        var r = (k+0.5)*Math.PI;\r\n        var m = (l+r)/2;\r\n\r\n        while (r-l > 1e-10) {\r\n            if (Math.tan(m) > m) r = m; else l = m;\r\n            m = (l+r)/2;\r\n        }\r\n\r\n        if (m*lambda > Math.PI*b) return -1;\r\n\r\n        return Math.asin(m*lambda/(Math.PI*b));\r\n    }\r\n        \r\n\r\n    function raysMaxima() {\r\n        let lines = [];\r\n\r\n        var maxK = Math.floor(b/lambda+0.5);\r\n\r\n        for (var k=1; k<=maxK; k++) { \r\n            var w = maximum(k);\r\n            if (w < 0) break;\r\n            var x = RAD*Math.cos(w), y = RAD*Math.sin(w); \r\n\r\n            lines.push({\r\n                x, y\r\n            });\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    return raysMaxima();\r\n}","import { useSelector, useDispatch } from 'react-redux'\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nimport getChartData from '../../getChartData';\r\nimport getImg from '../../getImg';\r\n\r\nimport './index.scss';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport waveColor from '../../waveColor';\r\n\r\nconst PIXEL_PER_METR = 740/7;\r\n\r\nfunction Info(){\r\n    const wavelength = useSelector(state => state.L);\r\n    const S = useSelector(state => state.S);\r\n    const D = useSelector(state => state.D);\r\n\r\n    let data = getChartData(wavelength, D, S);\r\n\r\n    return(\r\n        <div className=\"info\">\r\n            <h2>Результаты</h2>\r\n            <h3>Распределение интенсивности <span>при дифракции на кристалле</span></h3>\r\n            <Line  \r\n                className=\"info__chart\"\r\n                width=\"1200px\"\r\n                height=\"400px\"\r\n                \r\n                data={{\r\n                    labels: data.labels,\r\n                    datasets: [\r\n                        {\r\n                            label: 'I(x)',\r\n                            data: data.data,\r\n                            fill: false,\r\n                            backgroundColor: \"rgba(189, 195, 199,1.0)\",\r\n                            borderColor: 'rgba(0,0,0)',\r\n                        },\r\n                    ]\r\n                }}\r\n\r\n                options={{\r\n                    responsive: false,\r\n                    scales: {\r\n                        y: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'I',\r\n                                font: {\r\n                                    size: 16,\r\n                                    weight: 'bold'\r\n                                }\r\n                            }\r\n                        },\r\n                        x: {\r\n                            ticks: {\r\n\r\n                            },\r\n                            title: {\r\n                                display: true,\r\n                                text: 'θ(рад)',\r\n                                font: {\r\n                                    size: 16,\r\n                                    weight: 'bold'\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }}\r\n            />\r\n\r\n            {/* <h3>дифракционная картина</h3> */}\r\n\r\n            <div\r\n                className=\"info__img\"\r\n                style={{\r\n                    backgroundImage: getImg(wavelength, D, S)\r\n                }}\r\n            ></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Info;","export default function getChartData(waveL, D, S){\r\n    let wavelength = waveL*1e-9;\r\n    let b = D * 1e-12;\r\n\r\n    let labels = [];\r\n    let intensities = [];\r\n\r\n    function max(n){\r\n        return Math.asin(n*wavelength/2/b)\r\n    }\r\n\r\n    function intense(angle){\r\n        return Math.sin(Math.PI*b*Math.sin(angle)/wavelength)**2/(Math.PI*b*Math.sin(angle)/wavelength)**2;\r\n    }\r\n    \r\n    let w = 1.9;\r\n    let maxAngle = Math.atan(w/S);\r\n\r\n    for(var i = -maxAngle; i < maxAngle; i += 0.01){\r\n        labels.push(i.toFixed(2));\r\n        intensities.push(intense(i));\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        data: intensities,\r\n    }\r\n}","import Model from '../Model';\n\nimport './App.scss';\nimport Info from '../Info/';\n\n\nfunction App(){\n    return (\n        <div className=\"app-wrapper\">\n            <Model />\n            <Info />\n        </div>\n    );\n}\n\nexport default App;","import { createStore } from 'redux';\r\n\r\nlet initialState = {\r\n    L: 0.12,\r\n    A: 90,\r\n    D: 500,\r\n    S: 7.5\r\n};\r\n\r\nfunction reducer(state, action) {\r\n    switch(action.type) {\r\n        case \"SET_L\": return {...state, L: parseInt(action.value)};\r\n        case \"SET_D\": return {...state, D: parseFloat(action.value)};\r\n        case \"SET_S\": return {...state, S: parseFloat(action.value)};\r\n        case \"SET_A\": return {...state, A: parseFloat(action.value)};\r\n        \r\n        default: return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(reducer, initialState);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport store from './store';\nimport {Provider} from 'react-redux'\n\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}